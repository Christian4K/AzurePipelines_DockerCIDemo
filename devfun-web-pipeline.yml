name : DevFunWeb
trigger:
- master
variables:
  AzureSubscription: 'Microsoft Azure Sponsorship (82d445a5-0bf3-454a-804b-2fd0286650c2)'
  AzureContainerRegistry: 4tk8sdemoacr.azurecr.io
  AzureResourceGroup: 'k8sDemo'
  KubernetesCluster: 'aks2376'
  ReplicaCount: 3
  FlagEnableAlternateUrl: false
  HelmReleaseName: devfunweb-$(Release.EnvironmentName)
  ImageName: '$(AzureContainerRegistry)/devfunweb'
  IngressHostName: 'web.devfun.$(k8sNamespace).demo.4tecture.ch'
  ServiceUrl: 'https://api.devfun.$(k8sNamespace).demo.4tecture.ch'
  TlsSecretName: 'devfunweb-tls'
  HelmVersion: '3.0.0'
stages:
- stage: Build
  jobs:
  - job: CI_Build
    displayName: 'Build the Web'
    pool:
      #vmImage: 'ubuntu-latest'
      name: Default
    variables:
      DockerFile: DevFun.Web/DevFun.Web/Dockerfile
      BuildContext: DevFun.Web
      ChartPath: DevFun.Web/DevFun.Web/charts/devfunweb
      ArtifactSourceFolder: DevFun.Web/DevFun.Web
      ArtifactName: DevFunWeb
    steps:
    # - template: pipeline/git-version.yml
      - task: BuildVersioning@0
        displayName: BuildVersioning
        inputs:
          versionSource: 'gitversion'
          doInstallGitVersion: true
          GitVersionInstallerSource: 'choco'
          GitVersionInstallerVersion: '5.0.1'
          doUseLatestGitVersionInstallerVersion: false
          paramAssemblyVersion: '7'
          paramAssemblyFileVersion: '7'
          paramAssemblyInformationalVersion: '6'
          paramOverwriteFourthDigitWithBuildCounter: false
          paramVersionCode: '2'
          doAssemblyInfoAppendSuffix: false
          doConvertAssemblyInfoToLowerCase: true
          buildNumberVersionFormat: '3'
          buildNumberAction: 'replace'
          doReplaceAssemblyInfo: false
          doReplaceNuspec: false
          doReplaceNpm: false
          doReplaceDotNetCore: true
          filePatternDotNetCore: |
            **\*.csproj
            **\*.props
          paramDotNetCoreVersionType: '3'
          doReplaceAndroid: false
          doReplaceiOS: false
          doReplaceCustom: false
          doShowWarningsForUnmatchedRegex: false
          excludeFilePattern: |
            !**/bin/**
            !**/obj/**
            !**/node_modules/**
            !**/packages/**
      - task: CopyFiles@2
        displayName: "Copy props from repo root to docker context root"
        inputs:
          Contents: |
            *.props
            *.ruleset
          TargetFolder: '$(BuildContext)'

    # - template: pipeline/build-and-deploy-image.yml
      - task: Docker@1
        displayName: 'Build an image'
        inputs:
          containerregistrytype: 'Azure Container Registry'
          azureSubscriptionEndpoint: '$(AzureSubscription)'
          azureContainerRegistry: '$(AzureContainerRegistry)'
          command: 'Build an image'
          dockerFile: '$(DockerFile)'
          arguments: '--build-arg PAT=$(PatProductsFeed)'
          imageName: '$(ImageName):$(Build.BuildNumber)'
          useDefaultContext: false
          buildContext: '$(BuildContext)'
      - pwsh: |
          $id=docker images --filter "label=test=true" -q | Select-Object -First 1
          docker create --name testcontainer $id
          docker cp testcontainer:/testresults ./testresults
          docker rm testcontainer
        displayName: 'Copy test results'
      # - task: PublishTestResults@2
      #   inputs:
      #     testResultsFormat: 'VSTest'
      #     testResultsFiles: '**/*.trx'
      #     searchFolder: '$(System.DefaultWorkingDirectory)/testresults'
      # - task: PublishCodeCoverageResults@1
      #   inputs:
      #     codeCoverageTool: 'Cobertura'
      #     summaryFileLocation: '$(System.DefaultWorkingDirectory)/testresults/coverage/coverage.cobertura.xml'
      #     reportDirectory: '$(System.DefaultWorkingDirectory)/testresults/coverage/reports'
      - task: Docker@1
        displayName: 'Push an image'
        inputs:
          azureSubscriptionEndpoint: $(AzureSubscription)
          azureContainerRegistry: $(AzureContainerRegistry)
          command: 'Push an image'
          imageName: '$(ImageName):$(Build.BuildNumber)'

    # - template: pipeline/package-helm.yml
      - task: CopyFiles@2
        displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)/$(ArtifactName)'
        inputs:
          SourceFolder: $(ArtifactSourceFolder)
          Contents: values.release.yaml
          TargetFolder: '$(Build.ArtifactStagingDirectory)/$(ArtifactName)'
      - task: HelmInstaller@0
        displayName: 'Install Helm $(HelmVersion)'
        inputs:
          helmVersion: '$(HelmVersion)'
          checkLatestHelmVersion: false
          installKubectl: true
      - task: HelmDeploy@0
        displayName: 'helm package'
        inputs:
          azureSubscription: $(AzureSubscription)
          azureResourceGroup: $(AzureResourceGroup)
          kubernetesCluster: $(KubernetesCluster)
          command: package
          chartPath: $(ChartPath)
          destination: '$(Build.ArtifactStagingDirectory)/$(ArtifactName)'
          chartVersion: '$(Build.BuildNumber)'
          save: false

    # - template: pipeline/publish-artifacts.yml
      - publish: '$(Build.ArtifactStagingDirectory)/$(ArtifactName)'
        artifact: '$(ArtifactName)'
        displayName: 'Publish Artifact: $(ArtifactName)'


- stage: PR
  dependsOn: Build
  condition: and(succeeded('Build'), eq(variables['Build.Reason'], 'PullRequest')) 
  variables:
    k8sNamespace: 'dev'
    CertIssuer: 'letsencrypt-cluster-staging'
    DeploymentEnvironment: 'PR Build'
    FlagEnableAlternateUrl: true
    AlternateTestingUrl: https://api.devfun.staging.demo.4tecture.ch
  jobs:
  - deployment: PR
    displayName: 'Deploy DevFun Web to the $(k8sNamespace) environment'
    environment: devfun-web-pr
    pool:
      #vmImage: 'ubuntu-latest'
      name: Default
    strategy:
      runOnce:
        deploy:
          steps:
          - pwsh: |
              $prId = [regex]::match('$(Build.SourceBranch)','(refs/pull/)(\d*)(/merge)').Groups[2].Value
              Write-Host "##vso[task.setvariable variable=prId;]$prId"
              Write-Host "##vso[task.setvariable variable=HelmReleaseName;]devfunweb-pr$($prId)"
              Write-Host "##vso[task.setvariable variable=IngressHostName;]web.devfun.pr-$($prId).demo.4tecture.ch"
              Write-Host "##vso[task.setvariable variable=TlsSecretName;]devfunweb-pr$($prId)-tls"
              Write-Host "##vso[task.setvariable variable=ServiceUrl;]https://api.devfun.pr-$($prId).demo.4tecture.ch"
              Write-Host "##vso[task.setvariable variable=k8sNamespace;]pr-$($prId)"
            displayName: 'Define PR related Variables'
          - task: Kubernetes@1
            displayName: 'Create Namespace for PR'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              command: 'apply'
              useConfigurationFile: true
              configurationType: 'inline'
              inline: |
                kind: Namespace
                apiVersion: v1
                metadata:
                  name: $(k8snamespace)
                spec: {}
                status: {}
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
          - task: Kubernetes@1
            displayName: Add pull secret to namespace
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              namespace: '$(k8snamespace)'
              command: 'get'
              arguments: 'namespace $(k8snamespace)'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              azureSubscriptionEndpointForSecrets: '$(AzureSubscription)'
              azureContainerRegistry: '$(AzureContainerRegistry)'
              secretName: 'acrauth'
          - task: Tokenizer@0
            displayName: Tokenizer
            inputs:
              sourceFilesPattern: '$(Pipeline.Workspace)/DevFunWeb/values.release.yaml'
          - task: HelmInstaller@0
            displayName: 'Install Helm $(HelmVersion)'
            inputs:
              helmVersion: '$(HelmVersion)'
              checkLatestHelmVersion: false
              installKubectl: true
          - task: HelmDeploy@0
            displayName: 'helm upgrade'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              namespace: '$(k8sNamespace)'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/DevFunWeb/devfunweb-$(Build.BuildNumber).tgz'
              releaseName: '$(HelmReleaseName)'
              overrideValues: 'buildID=$(Build.BuildNumber)'
              valueFile: '$(Pipeline.Workspace)/DevFunWeb/values.release.yaml'

- stage: DeletePR
  dependsOn: PR
  condition: succeeded('PR')
  variables:
    k8sNamespace: 'dev'
    CertIssuer: 'letsencrypt-cluster-staging'
    DeploymentEnvironment: 'PR Build'
  jobs:
  - deployment: DeletePR
    displayName: 'Delete DevFun Web from the $(k8sNamespace) environment'
    environment: devfun-web-pr-delete
    pool:
      #vmImage: 'ubuntu-latest'
      name: Default
    strategy:
      runOnce:
        deploy:
          steps:
          - pwsh: |
              $prId = [regex]::match('$(Build.SourceBranch)','(refs/pull/)(\d*)(/merge)').Groups[2].Value
              Write-Host "##vso[task.setvariable variable=prId;]$prId"
              Write-Host "##vso[task.setvariable variable=HelmReleaseName;]devfunweb-pr$($prId)"
              Write-Host "##vso[task.setvariable variable=IngressHostName;]web.devfun.pr-$($prId).demo.4tecture.ch"
              Write-Host "##vso[task.setvariable variable=TlsSecretName;]devfunweb-pr$($prId)-tls"
              Write-Host "##vso[task.setvariable variable=ServiceUrl;]https://api.devfun.pr-$($prId).demo.4tecture.ch"
              Write-Host "##vso[task.setvariable variable=k8sNamespace;]pr-$($prId)"
            displayName: 'Define PR related Variables'
          - task: HelmInstaller@0
            displayName: 'Install Helm $(HelmVersion)'
            inputs:
              helmVersion: '$(HelmVersion)'
              checkLatestHelmVersion: false
              installKubectl: true
          - task: HelmDeploy@0
            displayName: 'helm delete realease'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              namespace: '$(k8sNamespace)'
              command: 'uninstall'
              arguments: '$(HelmReleaseName)'
          - task: Kubernetes@1
            displayName: 'kubectl delete'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              command: 'delete'
              arguments: 'namespaces $(k8sNamespace)'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'


- stage: Staging
  dependsOn: Build
  condition: and(succeeded('Build'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    k8sNamespace: 'staging'
    CertIssuer: 'letsencrypt-cluster'
    DeploymentEnvironment: 'Staging'
  jobs:
  - deployment: Staging
    displayName: 'Deploy DevFun Web to the $(k8sNamespace) environment'
    environment: devfun-web-staging
    pool:
      #vmImage: 'ubuntu-latest'
      name: Default
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Tokenizer@0
            displayName: Tokenizer
            inputs:
              sourceFilesPattern: '$(Pipeline.Workspace)/DevFunWeb/values.release.yaml'
          - task: HelmInstaller@0
            displayName: 'Install Helm $(HelmVersion)'
            inputs:
              helmVersion: '$(HelmVersion)'
              checkLatestHelmVersion: false
              installKubectl: true
          - task: HelmDeploy@0
            displayName: 'helm upgrade'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              namespace: '$(k8sNamespace)'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/DevFunWeb/devfunweb-*.tgz'
              releaseName: '$(HelmReleaseName)'
              valueFile: '$(Pipeline.Workspace)/DevFunWeb/values.release.yaml'

- stage: Prod
  dependsOn: Staging
  condition: succeeded('Staging')
  variables:
    k8sNamespace: 'prod'
    CertIssuer: 'letsencrypt-cluster'
    DeploymentEnvironment: 'Production'
  jobs:
  - deployment: Prod
    displayName: 'Deploy DevFun Web to the $(k8sNamespace) environment'
    environment: devfun-web-prod
    pool:
      #vmImage: 'ubuntu-latest'
      name: Default
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Tokenizer@0
            displayName: Tokenizer
            inputs:
              sourceFilesPattern: '$(Pipeline.Workspace)/DevFunWeb/values.release.yaml'
          - task: HelmInstaller@0
            displayName: 'Install Helm $(HelmVersion)'
            inputs:
              helmVersion: '$(HelmVersion)'
              checkLatestHelmVersion: false
              installKubectl: true
          - task: HelmDeploy@0
            displayName: 'helm upgrade'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              namespace: '$(k8sNamespace)'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/DevFunWeb/devfunweb-*.tgz'
              releaseName: '$(HelmReleaseName)'
              valueFile: '$(Pipeline.Workspace)/DevFunWeb/values.release.yaml'
