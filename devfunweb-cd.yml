name : DevFunWeb-CD
trigger: none
resources:
 pipelines:
   - pipeline: CIBuild
     source: DevFunWeb-CI
     trigger:
      branches:
       include:
         - master
         - feature/*
         - pull/*
         - refs/pull/*
variables:
  AzureSubscription: 'Microsoft Azure Sponsorship (82d445a5-0bf3-454a-804b-2fd0286650c2)'
  AzureContainerRegistry: 4tk8sdemoacr.azurecr.io
  AzureResourceGroup: 'k8sDemo'
  KubernetesCluster: 'aks2376'
  ReplicaCount: 3
  FlagEnableAlternateUrl: false
  HelmReleaseName: 'devfunweb-$(k8sNamespace)'
  ImageName: '$(AzureContainerRegistry)/devfunweb'
  IngressHostName: 'web.devfun.$(k8sNamespace).demo.4tecture.ch'
  ServiceUrl: 'https://api.devfun.$(k8sNamespace).demo.4tecture.ch'
  TlsSecretName: 'devfunweb-tls'
  HelmVersion: '3.0.0'
  ReleaseRevision: $[counter(variables['RESOURCES.PIPELINE.CIBUILD.RUNNAME'], 1)]
stages:
- stage: InitializeRelease
  jobs:
  - job: InitializeRelease
    pool:
      name: Default
    steps:
      - checkout: none
      - pwsh: |
          Get-ChildItem Env: | Format-Table -AutoSize
        displayName: 'Show all environment variables for demo'
      - pwsh: |
          Write-Host "##vso[build.updatebuildnumber]$(RESOURCES.PIPELINE.CIBUILD.RUNNAME)-$(ReleaseRevision)"
        displayName: 'Set Release Build Number'

- stage: PR
  dependsOn: InitializeRelease
  condition: and(succeeded('InitializeRelease'), startsWith(variables['RESOURCES.PIPELINE.CIBUILD.SOURCEBRANCH'], 'refs/pull/')) 
  variables:
    k8sNamespace: 'dev'
    CertIssuer: 'letsencrypt-cluster-staging'
    DeploymentEnvironment: 'PR Build'
    FlagEnableAlternateUrl: true
    AlternateTestingUrl: https://api.devfun.staging.demo.4tecture.ch
  jobs:
  - deployment: PR
    displayName: 'Deploy DevFun Web to the $(k8sNamespace) environment'
    environment: devfun-web-pr
    pool:
      #vmImage: 'ubuntu-latest'
      name: Default
    strategy:
      runOnce:
        deploy:
          steps:
          - download: CIBuild
            artifact: DevFunWeb
          - pwsh: |
              $prId = [regex]::match('$(RESOURCES.PIPELINE.CIBUILD.SOURCEBRANCH)','(refs/pull/)(\d*)(/merge)').Groups[2].Value
              Write-Host "##vso[task.setvariable variable=prId;]$prId"
              Write-Host "##vso[task.setvariable variable=HelmReleaseName;]devfunweb-pr$($prId)"
              Write-Host "##vso[task.setvariable variable=IngressHostName;]web.devfun.pr-$($prId).demo.4tecture.ch"
              Write-Host "##vso[task.setvariable variable=TlsSecretName;]devfunweb-pr$($prId)-tls"
              Write-Host "##vso[task.setvariable variable=ServiceUrl;]https://api.devfun.pr-$($prId).demo.4tecture.ch"
              Write-Host "##vso[task.setvariable variable=k8sNamespace;]pr-$($prId)"
            displayName: 'Define PR related Variables'
          - task: Kubernetes@1
            displayName: 'Create Namespace for $(k8sNamespace)'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              command: 'apply'
              useConfigurationFile: true
              configurationType: 'inline'
              inline: |
                kind: Namespace
                apiVersion: v1
                metadata:
                  name: $(k8snamespace)
                spec: {}
                status: {}
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
          - task: Kubernetes@1
            displayName: Add pull secret to namespace
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              namespace: '$(k8snamespace)'
              command: 'get'
              arguments: 'namespace $(k8snamespace)'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              azureSubscriptionEndpointForSecrets: '$(AzureSubscription)'
              azureContainerRegistry: '$(AzureContainerRegistry)'
              secretName: 'acrauth'
          - task: Tokenizer@0
            displayName: Tokenizer
            inputs:
              sourceFilesPattern: '$(Pipeline.Workspace)/CIBuild/DevFunWeb/values.release.yaml'
          - task: HelmInstaller@0
            displayName: 'Install Helm $(HelmVersion)'
            inputs:
              helmVersion: '$(HelmVersion)'
              checkLatestHelmVersion: false
              installKubectl: true
          - task: HelmDeploy@0
            displayName: 'helm upgrade'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              namespace: '$(k8sNamespace)'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/CIBuild/DevFunWeb/devfunweb-$(RESOURCES.PIPELINE.CIBUILD.RUNNAME).tgz'
              releaseName: '$(HelmReleaseName)'
              overrideValues: 'buildID=$(RESOURCES.PIPELINE.CIBUILD.RUNNAME)'
              valueFile: '$(Pipeline.Workspace)/CIBuild/DevFunWeb/values.release.yaml'

- stage: DeletePR
  dependsOn: PR
  condition: succeeded('PR')
  variables:
    k8sNamespace: 'dev'
    CertIssuer: 'letsencrypt-cluster-staging'
    DeploymentEnvironment: 'PR Build'
  jobs:
  - deployment: DeletePR
    displayName: 'Delete DevFun Web from the $(k8sNamespace) environment'
    environment: devfun-web-pr-delete
    pool:
      #vmImage: 'ubuntu-latest'
      name: Default
    strategy:
      runOnce:
        deploy:
          steps:
          - download: none
          - pwsh: |
              $prId = [regex]::match('$(RESOURCES.PIPELINE.CIBUILD.SOURCEBRANCH)','(refs/pull/)(\d*)(/merge)').Groups[2].Value
              Write-Host "##vso[task.setvariable variable=prId;]$prId"
              Write-Host "##vso[task.setvariable variable=HelmReleaseName;]devfunweb-pr$($prId)"
              Write-Host "##vso[task.setvariable variable=IngressHostName;]web.devfun.pr-$($prId).demo.4tecture.ch"
              Write-Host "##vso[task.setvariable variable=TlsSecretName;]devfunweb-pr$($prId)-tls"
              Write-Host "##vso[task.setvariable variable=ServiceUrl;]https://api.devfun.pr-$($prId).demo.4tecture.ch"
              Write-Host "##vso[task.setvariable variable=k8sNamespace;]pr-$($prId)"
            displayName: 'Define PR related Variables'
          - task: HelmInstaller@0
            displayName: 'Install Helm $(HelmVersion)'
            inputs:
              helmVersion: '$(HelmVersion)'
              checkLatestHelmVersion: false
              installKubectl: true
          - task: HelmDeploy@0
            displayName: 'helm delete realease'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              namespace: '$(k8sNamespace)'
              command: 'uninstall'
              arguments: '$(HelmReleaseName)'
          - task: Kubernetes@1
            displayName: 'kubectl delete'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              command: 'delete'
              arguments: 'namespaces $(k8sNamespace)'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'


- stage: Staging
  dependsOn: InitializeRelease
  condition: and(succeeded('InitializeRelease'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    k8sNamespace: 'staging'
    CertIssuer: 'letsencrypt-cluster'
    DeploymentEnvironment: 'Staging'
  jobs:
  - deployment: Staging
    displayName: 'Deploy DevFun Web to the $(k8sNamespace) environment'
    environment: devfun-web-staging
    pool:
      #vmImage: 'ubuntu-latest'
      name: Default
    strategy:
      runOnce:
        deploy:
          steps:
          - download: CIBuild
            artifact: DevFunWeb
          - task: Tokenizer@0
            displayName: Tokenizer
            inputs:
              sourceFilesPattern: '$(Pipeline.Workspace)/CIBuild/DevFunWeb/values.release.yaml'
          - task: HelmInstaller@0
            displayName: 'Install Helm $(HelmVersion)'
            inputs:
              helmVersion: '$(HelmVersion)'
              checkLatestHelmVersion: false
              installKubectl: true
          - task: Kubernetes@1
            displayName: 'Create Namespace for $(k8sNamespace)'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              command: 'apply'
              useConfigurationFile: true
              configurationType: 'inline'
              inline: |
                kind: Namespace
                apiVersion: v1
                metadata:
                  name: $(k8snamespace)
                spec: {}
                status: {}
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
          - task: Kubernetes@1
            displayName: Add pull secret to namespace
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              namespace: '$(k8snamespace)'
              command: 'get'
              arguments: 'namespace $(k8snamespace)'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              azureSubscriptionEndpointForSecrets: '$(AzureSubscription)'
              azureContainerRegistry: '$(AzureContainerRegistry)'
              secretName: 'acrauth'
          - task: HelmDeploy@0
            displayName: 'helm upgrade'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              namespace: '$(k8sNamespace)'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/CIBuild/DevFunWeb/devfunweb-$(RESOURCES.PIPELINE.CIBUILD.RUNNAME).tgz'
              releaseName: '$(HelmReleaseName)'
              overrideValues: 'buildID=$(RESOURCES.PIPELINE.CIBUILD.RUNNAME)'
              valueFile: '$(Pipeline.Workspace)/CIBuild/DevFunWeb/values.release.yaml'

- stage: Prod
  dependsOn: Staging
  condition: succeeded('Staging')
  variables:
    k8sNamespace: 'prod'
    CertIssuer: 'letsencrypt-cluster'
    DeploymentEnvironment: 'Production'
  jobs:
  - deployment: Prod
    displayName: 'Deploy DevFun Web to the $(k8sNamespace) environment'
    environment: devfun-web-prod
    pool:
      #vmImage: 'ubuntu-latest'
      name: Default
    strategy:
      runOnce:
        deploy:
          steps:
          - download: CIBuild
            artifact: DevFunWeb
          - task: Tokenizer@0
            displayName: Tokenizer
            inputs:
              sourceFilesPattern: '$(Pipeline.Workspace)/CIBuild/DevFunWeb/values.release.yaml'
          - task: HelmInstaller@0
            displayName: 'Install Helm $(HelmVersion)'
            inputs:
              helmVersion: '$(HelmVersion)'
              checkLatestHelmVersion: false
              installKubectl: true
          - task: Kubernetes@1
            displayName: 'Create Namespace for $(k8sNamespace)'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              command: 'apply'
              useConfigurationFile: true
              configurationType: 'inline'
              inline: |
                kind: Namespace
                apiVersion: v1
                metadata:
                  name: $(k8snamespace)
                spec: {}
                status: {}
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
          - task: Kubernetes@1
            displayName: Add pull secret to namespace
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscriptionEndpoint: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              namespace: '$(k8snamespace)'
              command: 'get'
              arguments: 'namespace $(k8snamespace)'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              azureSubscriptionEndpointForSecrets: '$(AzureSubscription)'
              azureContainerRegistry: '$(AzureContainerRegistry)'
              secretName: 'acrauth'
          - task: HelmDeploy@0
            displayName: 'helm upgrade'
            inputs:
              connectionType: 'Azure Resource Manager'
              azureSubscription: '$(AzureSubscription)'
              azureResourceGroup: '$(AzureResourceGroup)'
              kubernetesCluster: '$(KubernetesCluster)'
              useClusterAdmin: true
              namespace: '$(k8sNamespace)'
              command: 'upgrade'
              chartType: 'FilePath'
              chartPath: '$(Pipeline.Workspace)/CIBuild/DevFunWeb/devfunweb-$(RESOURCES.PIPELINE.CIBUILD.RUNNAME).tgz'
              releaseName: '$(HelmReleaseName)'
              overrideValues: 'buildID=$(RESOURCES.PIPELINE.CIBUILD.RUNNAME)'
              valueFile: '$(Pipeline.Workspace)/CIBuild/DevFunWeb/values.release.yaml'
