name : DevFunWeb-CI
trigger:
  branches:
    include:
      - master
      - releases/*
  paths:
    include:
      - DevFun.Web/*
variables:
  AzureSubscription: 'Microsoft Azure Sponsorship (82d445a5-0bf3-454a-804b-2fd0286650c2)'
  AzureContainerRegistry: 4tk8sdemoacr.azurecr.io
  AzureResourceGroup: 'k8sDemo'
  KubernetesCluster: 'aks2376'
  ImageName: '$(AzureContainerRegistry)/devfunweb'
  HelmVersion: '3.0.0'
stages:
- stage: Build
  jobs:
  - job: CI_Build
    displayName: 'Build the Web'
    pool:
      #vmImage: 'ubuntu-latest'
      name: Default
    variables:
      DockerFile: DevFun.Web/DevFun.Web/Dockerfile
      BuildContext: DevFun.Web
      ChartPath: DevFun.Web/DevFun.Web/charts/devfunweb
      ArtifactSourceFolder: DevFun.Web/DevFun.Web
      ArtifactName: DevFunWeb
    steps:
    # - template: pipeline/git-version.yml
      - task: BuildVersioning@0
        displayName: BuildVersioning
        inputs:
          versionSource: 'gitversion'
          doInstallGitVersion: true
          GitVersionInstallerSource: 'choco'
          GitVersionInstallerVersion: '5.0.1'
          doUseLatestGitVersionInstallerVersion: false
          paramAssemblyVersion: '7'
          paramAssemblyFileVersion: '7'
          paramAssemblyInformationalVersion: '6'
          paramOverwriteFourthDigitWithBuildCounter: false
          paramVersionCode: '2'
          doAssemblyInfoAppendSuffix: false
          doConvertAssemblyInfoToLowerCase: true
          buildNumberVersionFormat: '3'
          buildNumberAction: 'replace'
          doReplaceAssemblyInfo: false
          doReplaceNuspec: false
          doReplaceNpm: false
          doReplaceDotNetCore: true
          filePatternDotNetCore: |
            **\*.csproj
            **\*.props
          paramDotNetCoreVersionType: '3'
          doReplaceAndroid: false
          doReplaceiOS: false
          doReplaceCustom: false
          doShowWarningsForUnmatchedRegex: false
          excludeFilePattern: |
            !**/bin/**
            !**/obj/**
            !**/node_modules/**
            !**/packages/**
      - task: CopyFiles@2
        displayName: "Copy props from repo root to docker context root"
        inputs:
          Contents: |
            *.props
            *.ruleset
          TargetFolder: '$(BuildContext)'

    # - template: pipeline/build-and-deploy-image.yml
      - task: Docker@1
        displayName: 'Build an image'
        inputs:
          containerregistrytype: 'Azure Container Registry'
          azureSubscriptionEndpoint: '$(AzureSubscription)'
          azureContainerRegistry: '$(AzureContainerRegistry)'
          command: 'Build an image'
          dockerFile: '$(DockerFile)'
          arguments: '--build-arg PAT=$(PatProductsFeed)'
          imageName: '$(ImageName):$(Build.BuildNumber)'
          useDefaultContext: false
          buildContext: '$(BuildContext)'
      - pwsh: |
          $id=docker images --filter "label=test=true" -q | Select-Object -First 1
          docker create --name testcontainer $id
          docker cp testcontainer:/testresults ./testresults
          docker rm testcontainer
        displayName: 'Copy test results'
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '**/*.trx'
          searchFolder: '$(System.DefaultWorkingDirectory)/testresults'
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/testresults/coverage/coverage.cobertura.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/testresults/coverage/reports'
      - task: Docker@1
        displayName: 'Push an image'
        inputs:
          azureSubscriptionEndpoint: $(AzureSubscription)
          azureContainerRegistry: $(AzureContainerRegistry)
          command: 'Push an image'
          imageName: '$(ImageName):$(Build.BuildNumber)'

    # - template: pipeline/package-helm.yml
      - task: Tokenizer@0
        displayName: 'Tokenizer to set build number in values.release.yaml'
        inputs:
          sourceFilesPattern: 'values.release.yaml'
          sourcePath: $(ArtifactSourceFolder)
      - task: CopyFiles@2
        displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)/$(ArtifactName)'
        inputs:
          SourceFolder: $(ArtifactSourceFolder)
          Contents: values.release.yaml
          TargetFolder: '$(Build.ArtifactStagingDirectory)/$(ArtifactName)'
      - task: HelmInstaller@0
        displayName: 'Install Helm $(HelmVersion)'
        inputs:
          helmVersion: '$(HelmVersion)'
          checkLatestHelmVersion: false
          installKubectl: true
      - task: HelmDeploy@0
        displayName: 'helm package'
        inputs:
          azureSubscription: $(AzureSubscription)
          azureResourceGroup: $(AzureResourceGroup)
          kubernetesCluster: $(KubernetesCluster)
          command: package
          chartPath: $(ChartPath)
          destination: '$(Build.ArtifactStagingDirectory)/$(ArtifactName)'
          chartVersion: '$(Build.BuildNumber)'
          save: false

    # - template: pipeline/publish-artifacts.yml
      - publish: '$(Build.ArtifactStagingDirectory)/$(ArtifactName)'
        artifact: '$(ArtifactName)'
        displayName: 'Publish Artifact: $(ArtifactName)'