name : DevFunApi-CI
trigger:
  branches:
    include:
      - master
      - releases/*
  paths:
    include:
      - DevFun.Api/*
variables:
  AzureSubscription: 'Microsoft Azure Sponsorship'
  AzureContainerRegistry: 4tk8sdemoacr.azurecr.io
  AzureResourceGroup: 'k8sDemo'
  KubernetesCluster: 'aks2376'
  ImageName: '$(AzureContainerRegistry)/devfunapi'
  HelmVersion: '3.0.0'
  dbname: 'devfunapi'
resources:
  containers:
  - container: sql
    image: mcr.microsoft.com/mssql/server:2019-latest
    env:
      SA_PASSWORD: "verysecure!123"
      ACCEPT_EULA: "Y"
  - container: api
    image: '$(ImageName):$(Build.BuildNumber)'
    endpoint: 4tk8sdemoacr
    env: 
      devfunoptions__deploymentenvironment: "Development"
      connectionstrings__devfundatabase: 'Server=tcp:sql,1433;Database=$(dbname);User ID=sa;Password=verysecure!123;'
  - container: worker
    image: 4tk8sdemoacr.azurecr.io/linuxworker:stretch
    endpoint: 4tk8sdemoacr
stages:
- stage: Build
  jobs:
  - job: CI_Build
    displayName: 'Build the Api'
    pool:
      #vmImage: 'ubuntu-latest'
      name: Default
    variables:
      DockerFile: DevFun.Api/DevFun.Api/Dockerfile
      BuildContext: DevFun.Api
      ChartPath: DevFun.Api/DevFun.Api/charts/devfunapi
      ArtifactSourceFolder: DevFun.Api/DevFun.Api
      ArtifactName: DevFunApi
    steps:
    - template: templates/buildVersioning.yml
    - template: templates/buildAndPublishDockerImage.yml
    - template: templates/createHelmPackage.yml

  - job: DB_Build
    displayName: 'Build the DB Schema'
    pool:
      #vmImage: windows-latest
      name: Default
      demands:
      - msbuild
      - visualstudio
    variables:
      BuildPlatform: 'Any CPU'
      BuildConfiguration: release
    steps:
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $uri = "https://github.com/4tecture/SSDTDataMigration/releases/download/untagged-8c8c5eae85e1f1e33b69/4tecture.CustomSSDTMigrationScripts.msi"
          $out = "$(Agent.TempDirectory)\4tecture.CustomSSDTMigrationScripts.msi"
          Invoke-WebRequest -uri $uri -OutFile $out
          Start-Process -FilePath "msiexec.exe" -ArgumentList "/i $out /quiet /norestart /l c:\installlog.txt" -wait
    - task: VSBuild@1
      displayName: 'Build solution DevFun.Api/DevFun.DB/DevFun.DB.sqlproj'
      inputs:
        solution: DevFun.Api/DevFun.DB/DevFun.DB.sqlproj
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
    - publish: DevFun.Api/DevFun.DB/bin/Output
      artifact: Database
      displayName: 'Publish Artifact: Database' 

  - job: DataInitializer_Build
    displayName: 'Build the Test Data Initializer'
    pool:
      #vmImage: 'ubuntu-latest'
      name: Default
    variables:
      PublishRuntime: linux-x64
      PublishFolder: linux
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish Linux'
      inputs:
        command: publish
        publishWebProjects: false
        projects: DevFun.DataInitializer/DevFun.DataInitializer.sln
        arguments: '--output $(Build.ArtifactStagingDirectory)/linux --self-contained --configuration release --runtime linux-x64'
        zipAfterPublish: false
        modifyOutputPath: false
    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish Windows'
      inputs:
        command: publish
        publishWebProjects: false
        projects: DevFun.DataInitializer/DevFun.DataInitializer.sln
        arguments: '--output $(Build.ArtifactStagingDirectory)/windows --self-contained --configuration release --runtime win10-x64'
        zipAfterPublish: false
        modifyOutputPath: false
    - publish: $(Build.ArtifactStagingDirectory)
      artifact: TestDataInitializer
      displayName: 'Publish Artifact: TestDataInitializer'
- stage: IntegrationTests
  displayName: 'Run Integration Tests'
  dependsOn: Build
  jobs:
  - job: SystemTest
    displayName: 'System tests with SQL Server'
    pool:
      vmImage: 'ubuntu-latest'
      #name: Default
    services:
      sql: sql
      api: api
    container: worker
    steps:
      - download: current
        artifact: Database
        displayName: Download the Database artifact
      - download: current
        artifact: TestDataInitializer
        displayName: Download the TestDataInitializer artifact
      - task: Bash@3
        displayName: 'Deploy the DB schema to the database'
        inputs:
          targetType: 'inline'
          script: |
            /opt/sqlpackage/sqlpackage /a:Publish /tsn:sql /tdn:$(dbname) /tu:sa /tp:verysecure!123 /sf:$(Pipeline.Workspace)/Database/DevFun.DB.dacpac
      - task: Bash@3
        displayName: 'Run API calls to store entities'
        inputs:
          targetType: 'inline'
          script: |
            chmod +x $(Pipeline.Workspace)/TestDataInitializer/linux/DevFun.DataInitializer
            $(Pipeline.Workspace)/TestDataInitializer/linux/DevFun.DataInitializer -s http://api